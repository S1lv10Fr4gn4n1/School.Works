package edu.org.compiler;

/*
 * Desenvolvedores/Aluno: 
 * 
 * Marcelo Ferreira da Silva 
 * Silvio Fragnani da Silva
 * 
 * Ano:2010/1
 */

public interface ParserConstants {
	int			START_SYMBOL			= 53;

	int			FIRST_NON_TERMINAL		= 53;
	int			FIRST_SEMANTIC_ACTION	= 93;

	int[][]		PARSER_TABLE			= { { -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
			{ -1, -1, -1, -1, -1, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3, -1, 3, 3, -1, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3 },
			{ -1, -1, -1, -1, -1, 5, -1, 4, -1, -1, 4, -1, -1, -1, -1, -1, -1, 5, -1, 5, 5, -1, 5, -1, -1, -1, -1, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 5 },
			{ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2 },
			{ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 6 },
			{ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 8 },
			{ -1, -1, -1, -1, -1, 24, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 23, -1, 21, 20, -1, 22, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 19 },
			{ -1, -1, 26, -1, -1, -1, -1, -1, -1, -1, -1, 27, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 25, 25, 25, 25, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
			{ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 9 },
			{ -1, -1, -1, 10, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 10, -1, -1, -1, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
			{ -1, -1, -1, -1, 12, -1, -1, -1, -1, -1, -1, -1, -1, -1, 12, 12, 13, -1, -1, -1, -1, 12, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
			{ -1, -1, -1, -1, 17, -1, -1, -1, -1, -1, -1, -1, -1, -1, 15, 14, -1, -1, -1, -1, -1, 16, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
			{ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 18, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
			{ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 28, 29, 30, 31, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
			{ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 32, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
			{ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 33, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
			{ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 34, -1, -1, -1, -1, -1, -1, -1, -1, -1, 34, 34, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 34, 34, 34, -1, -1, 34, 34, 34, 34 },
			{ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 35, -1, -1, -1, 36, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
			{ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
			{ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 37, -1, -1, -1, -1, -1, -1, -1, -1, -1, 37, 37, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 37, 37, 37, -1, -1, 37, 37, 37, 37 },
			{ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 38, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
			{ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 40, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 39, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
			{ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 41, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
			{ -1, -1, -1, -1, -1, -1, -1, 42, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
			{ -1, -1, -1, -1, -1, -1, -1, 44, -1, -1, 43, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 43, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
			{ -1, -1, -1, -1, -1, -1, -1, 45, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
			{ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 46, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
			{ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 47, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
			{ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 48, -1, -1, -1, -1, -1, -1, -1, -1, -1, 48, 48, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 48, 48, 48, -1, -1, 48, 48, 48, 48 },
			{ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 49, 49, -1, 49, 49, 49, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 50, 51, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
			{ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 54, -1, -1, -1, -1, -1, -1, -1, -1, -1, 53, 52, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 55, 52, 52, -1, -1, 52, 52, 52, 52 },
			{ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 56, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 56, 56, -1, -1, 56, 56, 56, 56 },
			{ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 58, 58, -1, 58, 58, 58, -1, -1, -1, -1, 57, 57, 57, 57, 57, 57, 58, 58, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
			{ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 59, 60, 61, 62, 63, 64, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
			{ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 65, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 65, 65, -1, -1, 65, 65, 65, 65 },
			{ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 66, 66, -1, 66, 66, 66, -1, -1, -1, -1, 66, 66, 66, 66, 66, 66, 66, 66, -1, 67, 68, -1, -1, -1, -1, -1, -1 },
			{ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 69, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 69, 69, -1, -1, 69, 69, 69, 69 },
			{ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 70, 70, -1, 70, 70, 70, -1, -1, -1, -1, 70, 70, 70, 70, 70, 70, 70, 70, -1, 70, 70, 71, 72, -1, -1, -1, -1 },
			{ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 77, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 78, 79, -1, -1, 74, 75, 76, 73 },
			{ -1, -1, -1, -1, -1, -1, 81, -1, 82, -1, -1, -1, 83, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 80, 80, -1, 80, 80, 80, -1, -1, -1, -1, 80, 80, 80, 80, 80, 80, 80, 80, -1, 80, 80, 80, 80, -1, -1, -1, -1 } };

	int[][]		PRODUCTIONS				= { { 10, 19, 25, 26, 27, 56, 28, 27, 54, 28, 94 }, { 0 }, { 57 }, { 59, 55 }, { 0 }, { 54 }, { 61, 4, 63, 95, 29, 58 }, { 0 }, { 57 }, { 52, 97, 62 }, { 0 }, { 30, 61 }, { 64, 96 }, { 65 }, { 16 }, { 15 }, { 22 }, { 5 }, { 17, 25, 64, 30, 49, 26 },
			{ 52, 97, 60 }, { 67 }, { 68 }, { 73 }, { 80 }, { 6, 29, 98 }, { 66, 99, 81, 100, 29 }, { 3, 25, 71, 26, 29 }, { 12, 25, 72, 26, 29 }, { 32 }, { 33 }, { 34 }, { 35 }, { 21, 25, 61, 101, 26, 29 }, { 20, 25, 69, 26, 29 }, { 81, 102, 70 }, { 0 }, { 30, 69 }, { 81 }, { 75, 74 },
			{ 28, 103 }, { 79, 28, 103 }, { 125, 23, 81, 27, 76 }, { 78, 77 }, { 0 }, { 76 }, { 104, 8, 81, 105, 31, 54, 106 }, { 11, 54 }, { 107, 18, 27, 54, 28, 108 }, { 83, 82 }, { 0 }, { 42, 83, 109, 82 }, { 43, 83, 110, 82 }, { 84 }, { 24, 111 }, { 14, 112 }, { 44, 83, 113 }, { 87, 85 },
			{ 86, 114, 87, 115 }, { 0 }, { 36 }, { 37 }, { 38 }, { 39 }, { 40 }, { 41 }, { 89, 88 }, { 0 }, { 45, 89, 116, 88 }, { 46, 89, 117, 88 }, { 91, 90 }, { 0 }, { 47, 91, 118, 90 }, { 48, 91, 119, 90 }, { 52, 92 }, { 49, 121 }, { 50, 122 }, { 51, 123 }, { 25, 81, 26 }, { 45, 91 },
			{ 46, 91, 124 }, { 120 }, { 7 }, { 9 }, { 13, 25, 81, 26 } };

	String[]	PARSER_ERROR			= { "", "era esperado do fim de programa", "era esperado palavra reservada", "era esperado add", "era esperado as", "era esperado boolean", "era esperado break", "era esperado capacity", "era esperado case", "era esperado count", "era esperado def",
			"era esperado default", "era esperado delete", "era esperado elementOf", "era esperado false", "era esperado float", "era esperado int", "era esperado list", "era esperado loop", "era esperado main", "era esperado printf", "era esperado scanf", "era esperado string",
			"era esperado switch", "era esperado true", "era esperado \"(\"", "era esperado \")\"", "era esperado \"[\"", "era esperado \"]\"", "era esperado \".\"", "era esperado \",\"", "era esperado \":\"", "era esperado \"=\"", "era esperado \"+=\"", "era esperado \"-=\"",
			"era esperado \"*=\"", "era esperado \"==\"", "era esperado \"!=\"", "era esperado \"<\"", "era esperado \"<=\"", "era esperado \">\"", "era esperado \">=\"", "era esperado \"||\"", "era esperado \"&&\"", "era esperado \"!\"", "era esperado \"+\"", "era esperado \"-\"",
			"era esperado \"*\"", "era esperado \"/\"", "era esperado inteiro", "era esperado real", "era esperado literal", "era esperado identificador", "era esperado \"def\"", // "<forma_programa> inválido",
			"era esperado comando", // "<lista_comandos> inválido",
			"era esperado comando", // "<lista_comandos1> inválido",
			"era esperado identificador", // "<declaracao_variaveis> inválido",
			"era esperado identificador", // "<forma_variaveis> inválido",
			"era esperado \"]\" ou identificador", // "<forma_variaveis1> inválido",
			"era esperado comando", // "<comando> inválido", 
			"era esperado comando", // "<comando1> inválido",
			"era esperado identificador", // "<lista_identificadores> inválido",
			"era esperado as ou \",\" ou \")\"", // "<lista_identificadores1> inválido",
			"era esperado tipo", // "<tipo> inválido",
			"era esperado boolean ou float ou int ou string", // "<tipo_simples> inválido",
			"era esperado list", // "<tipo_lista> inválido",
			"era esperado \"=\" ou \"+=\" ou \"-\" ou \"*=\"", // "<operador> inválido",
			"era esperado scanf", // "<forma_entrada> inválido",
			"era esperado printf", // "<forma_saida> inválido",
			"era esperado expressão", // "<lista_expressoes> inválido",
			"era esperado as ou \")\" ou \",\"", // "<lista_expressoes1> inválido",
			"era esperado expressão", // "<elemento_outro> inválido",
			"era esperado expressão", // "<posicao> inválido",
			"era esperado switch", // "<forma_selecao> inválido",
			"era esperado default ou \"]\"", // "<forma_selecao1> inválido",
			"era esperado switch", // "<forma_switch> inválido",
			"era esperado case", // "<forma_case> inválido",
			"era esperado case ou default ou \"]\"", // "<forma_case1> inválido",
			"era esperado case", // "<comando_case> inválido",
			"era esperado default", // "<forma_default> inválido",
			"era esperado loop", // "<forma_repeticao> inválido",
			"era esperado expressão", // "<expressao> inválido",
			"era esperado expressão", // "<expresssao1> inválido",
			"era esperado expressão", // "<valor> inválido",
			"era esperado expressão", // "<relacional> inválido",
			"era esperado expressão", // "<relacional1> inválido",
			"era esperado expressão", // "<operador_relacional> inválido",
			"era esperado expressão", // "<aritimetica> inválido",
			"era esperado expressão", // "<aritimetica1> inválido",
			"era esperado expressão", // "<termo> inválido",
			"era esperado expressão", // "<termo1> inválido",
			"era esperado expressão", // "<elemento> inválido",
			"era esperado expressão", // "<elemento1> inválido"
										};
}
