package memoryManager;

import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Set;

import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.ListSelectionModel;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.table.DefaultTableModel;

public class Codfish_v2 extends javax.swing.JFrame {
	private static final long			serialVersionUID	= 4038690110715447166L;

	private BufferPool					bufferPool			= new BufferPool();
	private DefaultTableModel			tableModelFields;
	private DefaultTableModel			tableModelFieldValue;
	private Map<String, StructTable>	listSchema;

	/** Creates new form Codfish_v2 */
	public Codfish_v2() {
		initComponents();
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	// <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
	private void initComponents() {

		jTabbedPanePowerCod = new javax.swing.JTabbedPane();
		jPanelDataBase = new javax.swing.JPanel();
		jScrollPaneJTable = new javax.swing.JScrollPane();
		jTableFields = new javax.swing.JTable();
		jButtonSelectSchema = new javax.swing.JButton();
		jLabelTableDB = new javax.swing.JLabel();
		jComboBoxTableDB = new javax.swing.JComboBox();
		jButtonSelectFileData = new javax.swing.JButton();
		jPanelBrowse = new javax.swing.JPanel();
		jButtonUpdate = new javax.swing.JButton();
		jButtonInsert = new javax.swing.JButton();
		jButtonDelete = new javax.swing.JButton();
		jButtonShow = new javax.swing.JButton();
		jLabelTableBrowse = new javax.swing.JLabel();
		jComboBoxTableDBBrowse = new javax.swing.JComboBox();
		jScrollPaneJTableFieldValue = new javax.swing.JScrollPane();
		jTableFieldsValue = new javax.swing.JTable();
		jTextFieldFieldSearch = new javax.swing.JTextField();
		jLabelFieldSearch = new javax.swing.JLabel();
		jLabel1 = new javax.swing.JLabel();

		this.setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
		this.setResizable(false);
		this.setTitle("Codfish v2.0");

		this.tableModelFields = new DefaultTableModel(new Object[][] {}, new String[] { "Name", "Type", "Size", "Search" }) {
			private static final long	serialVersionUID	= 1L;
			Class<?>[]					types				= new Class[] { java.lang.String.class, TypeField.class, java.lang.Integer.class,
																	java.lang.Boolean.class };
			boolean[]					canEdit				= new boolean[] { false, false, false, false };

			public Class<?> getColumnClass(int columnIndex) {
				return types[columnIndex];
			}

			public boolean isCellEditable(int rowIndex, int columnIndex) {
				return canEdit[columnIndex];
			}
		};

		jTableFields.setModel(this.tableModelFields);

		jTableFields.setColumnSelectionAllowed(true);
		jScrollPaneJTable.setViewportView(jTableFields);
		jTableFields.getColumnModel().getSelectionModel().setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
		jTableFields.getColumnModel().getColumn(0).setResizable(false);
		jTableFields.getColumnModel().getColumn(1).setResizable(false);
		jTableFields.getColumnModel().getColumn(2).setResizable(false);

		jButtonSelectSchema.setText("Select Schema");
		jButtonSelectSchema.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				jButtonSelectSchemaPerformed(evt);
			}
		});

		jLabelTableDB.setText("Table");

		jComboBoxTableDB.addItemListener(new java.awt.event.ItemListener() {
			public void itemStateChanged(java.awt.event.ItemEvent evt) {
				jComboBoxTableDBItemStateChanged(evt);
			}
		});

		jButtonSelectFileData.setText("Select File Data");
		jButtonSelectFileData.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				jButtonSelectFileDataPerformed(evt);
			}
		});

		javax.swing.GroupLayout jPanelDataBaseLayout = new javax.swing.GroupLayout(jPanelDataBase);
		jPanelDataBase.setLayout(jPanelDataBaseLayout);
		jPanelDataBaseLayout.setHorizontalGroup(jPanelDataBaseLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(
				jPanelDataBaseLayout.createSequentialGroup().addContainerGap().addGroup(
						jPanelDataBaseLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addComponent(jScrollPaneJTable,
								javax.swing.GroupLayout.DEFAULT_SIZE, 488, Short.MAX_VALUE).addComponent(jLabelTableDB).addComponent(jComboBoxTableDB,
								javax.swing.GroupLayout.PREFERRED_SIZE, 203, javax.swing.GroupLayout.PREFERRED_SIZE).addGroup(
								jPanelDataBaseLayout.createSequentialGroup().addComponent(jButtonSelectSchema, javax.swing.GroupLayout.PREFERRED_SIZE, 124,
										javax.swing.GroupLayout.PREFERRED_SIZE).addGap(18, 18, 18).addComponent(jButtonSelectFileData,
										javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE))).addContainerGap()));
		jPanelDataBaseLayout.setVerticalGroup(jPanelDataBaseLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(
				jPanelDataBaseLayout.createSequentialGroup().addContainerGap().addComponent(jLabelTableDB).addGap(7, 7, 7).addComponent(jComboBoxTableDB,
						javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
						.addGap(18, 18, 18)
						.addComponent(jScrollPaneJTable, javax.swing.GroupLayout.PREFERRED_SIZE, 204, javax.swing.GroupLayout.PREFERRED_SIZE).addPreferredGap(
								javax.swing.LayoutStyle.ComponentPlacement.UNRELATED).addGroup(
								jPanelDataBaseLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE).addComponent(jButtonSelectSchema)
										.addComponent(jButtonSelectFileData)).addContainerGap()));

		jTabbedPanePowerCod.addTab("DataBase", jPanelDataBase);

		jButtonUpdate.setText("Update");
		jButtonUpdate.setMaximumSize(new java.awt.Dimension(50, 30));
		jButtonUpdate.setMinimumSize(new java.awt.Dimension(50, 30));
		jButtonUpdate.setPreferredSize(new java.awt.Dimension(50, 30));
		jButtonUpdate.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				jButtonUpdateActionPerformed(evt);
			}
		});

		jButtonInsert.setText("Insert");
		jButtonInsert.setMaximumSize(new java.awt.Dimension(50, 30));
		jButtonInsert.setMinimumSize(new java.awt.Dimension(50, 30));
		jButtonInsert.setPreferredSize(new java.awt.Dimension(50, 30));
		jButtonInsert.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				jButtonInsertActionPerformed(evt);
			}
		});

		jButtonDelete.setText("Delete");
		jButtonDelete.setMaximumSize(new java.awt.Dimension(50, 30));
		jButtonDelete.setMinimumSize(new java.awt.Dimension(50, 30));
		jButtonDelete.setPreferredSize(new java.awt.Dimension(50, 30));
		jButtonDelete.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				jButtonDeleteActionPerformed(evt);
			}
		});

		jButtonShow.setText("Show");
		jButtonShow.setMaximumSize(new java.awt.Dimension(50, 30));
		jButtonShow.setMinimumSize(new java.awt.Dimension(50, 30));
		jButtonShow.setPreferredSize(new java.awt.Dimension(50, 30));
		jButtonShow.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				jButtonShowActionPerformed(evt);
			}
		});

		jLabelTableBrowse.setText("Table");

		jComboBoxTableDBBrowse.addItemListener(new java.awt.event.ItemListener() {
			public void itemStateChanged(java.awt.event.ItemEvent evt) {
				jComboBoxTableDBBrowseItemStateChanged(evt);
			}
		});

		this.tableModelFieldValue = new DefaultTableModel(new Object[][] {}, new String[] { "Field", "Value" }) {
			private static final long	serialVersionUID	= 1L;
			Class<?>[]					types				= new Class[] { java.lang.String.class, java.lang.String.class };
			boolean[]					canEdit				= new boolean[] { true, true };

			public Class<?> getColumnClass(int columnIndex) {
				return types[columnIndex];
			}

			public boolean isCellEditable(int rowIndex, int columnIndex) {
				return canEdit[columnIndex];
			}
		};

		jTableFieldsValue.setModel(this.tableModelFieldValue);

		jTableFieldsValue.setColumnSelectionAllowed(true);
		jScrollPaneJTableFieldValue.setViewportView(jTableFieldsValue);
		jTableFieldsValue.getTableHeader().setReorderingAllowed(false);
		jTableFieldsValue.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
		jTableFieldsValue.getColumnModel().getColumn(1).setResizable(false);

		jLabelFieldSearch.setText("fieldSearch");

		javax.swing.GroupLayout jPanelBrowseLayout = new javax.swing.GroupLayout(jPanelBrowse);
		jPanelBrowse.setLayout(jPanelBrowseLayout);
		jPanelBrowseLayout.setHorizontalGroup(jPanelBrowseLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(
				jPanelBrowseLayout.createSequentialGroup().addContainerGap().addGroup(
						jPanelBrowseLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addComponent(jScrollPaneJTableFieldValue,
								javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 488, Short.MAX_VALUE).addGroup(
								javax.swing.GroupLayout.Alignment.TRAILING,
								jPanelBrowseLayout.createSequentialGroup().addComponent(jButtonInsert, javax.swing.GroupLayout.DEFAULT_SIZE, 110,
										Short.MAX_VALUE).addGap(18, 18, 18).addComponent(jButtonUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, 106,
										javax.swing.GroupLayout.PREFERRED_SIZE).addGap(17, 17, 17).addComponent(jButtonDelete,
										javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE).addGap(18, 18, 18).addComponent(
										jButtonShow, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)).addGroup(
								javax.swing.GroupLayout.Alignment.TRAILING,
								jPanelBrowseLayout.createSequentialGroup().addGroup(
										jPanelBrowseLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addComponent(jComboBoxTableDBBrowse,
												javax.swing.GroupLayout.PREFERRED_SIZE, 203, javax.swing.GroupLayout.PREFERRED_SIZE).addComponent(
												jLabelTableBrowse)).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 63, Short.MAX_VALUE)
										.addGroup(
												jPanelBrowseLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addComponent(
														jLabelFieldSearch).addComponent(jTextFieldFieldSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 222,
														javax.swing.GroupLayout.PREFERRED_SIZE)))).addContainerGap()));
		jPanelBrowseLayout.setVerticalGroup(jPanelBrowseLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(
				jPanelBrowseLayout.createSequentialGroup().addContainerGap().addGroup(
						jPanelBrowseLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE).addComponent(jLabelTableBrowse).addComponent(
								jLabelFieldSearch)).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addGroup(
						jPanelBrowseLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE).addComponent(jComboBoxTableDBBrowse,
								javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
								.addComponent(jTextFieldFieldSearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE,
										javax.swing.GroupLayout.PREFERRED_SIZE)).addGap(18, 18, 18).addComponent(jScrollPaneJTableFieldValue,
						javax.swing.GroupLayout.DEFAULT_SIZE, 203, Short.MAX_VALUE).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
						.addGroup(
								jPanelBrowseLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE).addComponent(jButtonInsert,
										javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
										.addComponent(jButtonShow, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE,
												javax.swing.GroupLayout.PREFERRED_SIZE).addComponent(jButtonDelete, javax.swing.GroupLayout.PREFERRED_SIZE,
												javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE).addComponent(jButtonUpdate,
												javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE,
												javax.swing.GroupLayout.PREFERRED_SIZE)).addContainerGap()));

		jTabbedPanePowerCod.addTab("Browse", jPanelBrowse);

		jLabel1.setFont(new java.awt.Font("DejaVu Sans", 0, 18));
		jLabel1.setText("Power Codfish v2.0");

		javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
		getContentPane().setLayout(layout);
		layout.setHorizontalGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addComponent(jTabbedPanePowerCod,
				javax.swing.GroupLayout.PREFERRED_SIZE, 524, javax.swing.GroupLayout.PREFERRED_SIZE).addGroup(
				layout.createSequentialGroup().addGap(169, 169, 169).addComponent(jLabel1)));
		layout.setVerticalGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(
				javax.swing.GroupLayout.Alignment.TRAILING,
				layout.createSequentialGroup().addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE).addComponent(jLabel1).addGap(18, 18, 18)
						.addComponent(jTabbedPanePowerCod, javax.swing.GroupLayout.PREFERRED_SIZE, 377, javax.swing.GroupLayout.PREFERRED_SIZE)));

		pack();
	}// </editor-fold>//GEN-END:initComponents

	private void jButtonSelectSchemaPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonOkActionPerformed
		if (this.selectSchema()) {
			this.copyListSchema();
			this.loadSchemaJComboDataBases();
			this.loadSchemaToGridDB((String) this.jComboBoxTableDB.getSelectedItem());
		}
	}//GEN-LAST:event_jButtonOkActionPerformed

	private void jButtonSelectFileDataPerformed(java.awt.event.ActionEvent evt) {
		this.importFileData();
	}

	private void jComboBoxTableDBItemStateChanged(java.awt.event.ItemEvent evt) {
		this.loadSchemaToGridDB((String) this.jComboBoxTableDB.getSelectedItem());
	}

	private void jButtonUpdateActionPerformed(java.awt.event.ActionEvent evt) {
		try {
			List<FieldValue> listFieldValue = null;
			
			if (this.bufferPool.thereRegister((String) this.jComboBoxTableDBBrowse.getSelectedItem(), this.jTextFieldFieldSearch.getText())) {
				listFieldValue = this.getListFieldValue();
				this.bufferPool.update((String) this.jComboBoxTableDBBrowse.getSelectedItem(), this.jTextFieldFieldSearch.getText(), listFieldValue);
			} else {
				if (JOptionPane.showConfirmDialog(null, "Registro nao existe, deseja incluir ?") == JOptionPane.OK_OPTION) {
					listFieldValue = this.getListFieldValue();
					this.bufferPool.insert((String) this.jComboBoxTableDBBrowse.getSelectedItem(), this.jTextFieldFieldSearch.getText(), listFieldValue);
				}
			}

			//			if (this.bufferPool.thereRegister((String) this.jComboBoxTableDBBrowse.getSelectedItem(), this.jTextFieldValueSearchField.getText())) {
			//				this.bufferPool.update((String) this.jComboBoxTableDBBrowse.getSelectedItem(), this.jTextFieldValueSearchField.getText(),
			//						this.jTextFieldNameField.getText(), this.jTextFieldValueField.getText());
			//			} else {
			//				if (JOptionPane.showConfirmDialog(null, "Registro nao existe, deseja incluir ?") == JOptionPane.OK_OPTION) {
			//					this.bufferPool.insert((String) this.jComboBoxTableDBBrowse.getSelectedItem(), this.jTextFieldValueSearchField.getText(),
			//							this.jTextFieldNameField.getText(), this.jTextFieldValueField.getText());
			//				}
			//			}

		} catch (Exception e) {
			JOptionPane.showMessageDialog(null, e.getMessage());
		}
	}

	private List<FieldValue> getListFieldValue() {
		List<FieldValue> listFieldValue = new ArrayList<FieldValue>();
		StructTable table = this.bufferPool.getListStructTable().get((String) this.jComboBoxTableDBBrowse.getSelectedItem());

		for (int i = 0; i < this.tableModelFieldValue.getRowCount(); i++) {
			Field field = table.getField((String) this.tableModelFieldValue.getValueAt(i, 0));

			FieldValue fieldValue = new FieldValue(field);
			fieldValue.setValue((String) this.tableModelFieldValue.getValueAt(i, 1));

			listFieldValue.add(fieldValue);
		}

		return listFieldValue;
	}

	private void jButtonInsertActionPerformed(java.awt.event.ActionEvent evt) {
		try {
			List<FieldValue> listFieldValue = null;

			if (!this.bufferPool.thereRegister((String) this.jComboBoxTableDBBrowse.getSelectedItem(), this.jTextFieldFieldSearch.getText())) {
				listFieldValue = this.getListFieldValue();
				this.bufferPool.insert((String) this.jComboBoxTableDBBrowse.getSelectedItem(), this.jTextFieldFieldSearch.getText(), listFieldValue);
			} else {
				if (JOptionPane.showConfirmDialog(null, "Registro ja existe, deseja atualizar ?") == JOptionPane.OK_OPTION) {
					listFieldValue = this.getListFieldValue();
					this.bufferPool.update((String) this.jComboBoxTableDBBrowse.getSelectedItem(), this.jTextFieldFieldSearch.getText(), listFieldValue);
				}
			}

			//			if (!this.bufferPool.thereRegister((String) this.jComboBoxTableDBBrowse.getSelectedItem(), this.jTextFieldFieldSearch.getText())) {
			//				this.bufferPool.insert((String) this.jComboBoxTableDBBrowse.getSelectedItem(), this.jTextFieldFieldSearch.getText(),
			//						this.jTextFieldNameField.getText(), this.jTextFieldValueField.getText());
			//			} else {
			//				if (JOptionPane.showConfirmDialog(null, "Registro ja existe, deseja atualizar ?") == JOptionPane.OK_OPTION) {
			//					this.bufferPool.update((String) this.jComboBoxTableDBBrowse.getSelectedItem(), this.jTextFieldValueSearchField.getText(),
			//							this.jTextFieldNameField.getText(), this.jTextFieldValueField.getText());
			//				}
			//			}

		} catch (Exception e) {
			JOptionPane.showMessageDialog(null, e.getMessage());
		}
	}

	private void jButtonDeleteActionPerformed(java.awt.event.ActionEvent evt) {
		try {
			if (this.bufferPool.thereRegister((String) this.jComboBoxTableDBBrowse.getSelectedItem(), this.jTextFieldFieldSearch.getText())) {
				this.bufferPool.delete((String) this.jComboBoxTableDBBrowse.getSelectedItem(), this.jTextFieldFieldSearch.getText());
			} else {
				JOptionPane.showMessageDialog(null, "Nao existe registro para essa tabela!");
			}
		} catch (Exception e) {
			JOptionPane.showMessageDialog(null, e.getMessage());
		}
	}

	private void jButtonShowActionPerformed(java.awt.event.ActionEvent evt) {
		try {
			if (this.bufferPool.thereRegister((String) this.jComboBoxTableDBBrowse.getSelectedItem(), this.jTextFieldFieldSearch.getText())) {
				List<FieldValue> listResult = this.bufferPool.showFieldValue((String) this.jComboBoxTableDBBrowse.getSelectedItem(), this.jTextFieldFieldSearch
						.getText());

				this.changeJTableBrowse(listResult);
			} else {
				JOptionPane.showMessageDialog(null, "Nao exister registro!");
			}
		} catch (Exception e) {
			JOptionPane.showMessageDialog(null, e.getMessage());
		}
	}

	private void jComboBoxTableDBBrowseItemStateChanged(java.awt.event.ItemEvent evt) {
		this.changeFieldSearch((String) jComboBoxTableDBBrowse.getSelectedItem());
		this.changeJTableBrowse((String) jComboBoxTableDBBrowse.getSelectedItem());
	}

	private void changeJTableBrowse(List<FieldValue> listResult) {
		while (this.tableModelFieldValue.getRowCount() > 0) {
			this.tableModelFieldValue.removeRow(0);
		}

		for (FieldValue fieldValue : listResult) {
			final Object[] reg = { fieldValue.getName(), fieldValue.getValue() };
			this.tableModelFieldValue.addRow(reg);
		}
	}

	private void changeJTableBrowse(String tableName) {
		while (this.tableModelFieldValue.getRowCount() > 0) {
			this.tableModelFieldValue.removeRow(0);
		}

		StructTable table = this.listSchema.get(tableName);

		Map<String, Field> listField = table.getListFields();
		Set<String> sFields = listField.keySet();

		for (Iterator<String> i = sFields.iterator(); i.hasNext();) {
			String valueField = i.next();
			Field field = listField.get(valueField);

			final Object[] reg = { field.getName(), "" };

			this.tableModelFieldValue.addRow(reg);
		}

	}

	private boolean selectSchema() {
		JFileChooser selectFile = new JFileChooser();
		FileNameExtensionFilter filter = new FileNameExtensionFilter("Schema", "xml");
		selectFile.setFileFilter(filter);

		if (selectFile.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
			try {
				String pathFile = selectFile.getSelectedFile().getCanonicalPath();

				File e = new File(pathFile);
				if (!e.exists()) {
					JOptionPane.showMessageDialog(null, "Arquivo " + pathFile + " nao exite");
					return false;
				}

				this.bufferPool.loadSchema(pathFile);
				this.jButtonSelectSchema.setEnabled(false);

				return true;

			} catch (IOException erro) {
				erro.printStackTrace();
				return false;
			}
		}
		return false;
	}

	private void loadSchemaToGridDB(String tableName) {
		while (this.tableModelFields.getRowCount() > 0) {
			this.tableModelFields.removeRow(0);
		}

		StructTable table = this.listSchema.get(tableName);

		Map<String, Field> listField = table.getListFields();
		Set<String> sFields = listField.keySet();

		for (Iterator<String> i = sFields.iterator(); i.hasNext();) {
			String valueField = i.next();
			Field field = listField.get(valueField);

			int sizeField = field.getSize();
			if (field.getType() == TypeField.STRING)
				sizeField = sizeField / 2;

			final Object[] reg = { field.getName(), field.getType(), sizeField, field.getSearch() };

			this.tableModelFields.addRow(reg);
		}
	}

	private void changeFieldSearch(String tableName) {
		StructTable table = this.listSchema.get(tableName);
		Field field = table.getSearchField();

		this.jLabelFieldSearch.setText(field.getName());
	}

	private void loadSchemaJComboDataBases() {
		Map<String, StructTable> listSchema = this.listSchema;

		Set<String> sTables = listSchema.keySet();

		for (Iterator<String> it = sTables.iterator(); it.hasNext();) {
			String valueTable = it.next();
			StructTable table = listSchema.get(valueTable);

			this.jComboBoxTableDB.addItem(table.getNameStruct());
			this.jComboBoxTableDBBrowse.addItem(table.getNameStruct());
		}
	}

	private void copyListSchema() {
		this.listSchema = this.bufferPool.getListStructTable();
		
	}

	private void importFileData() {
		if (this.listSchema == null || this.listSchema.size() <= 0)
			return;

		String tableName = (String) jComboBoxTableDB.getSelectedItem();

		if (tableName == null || tableName.isEmpty()) {
			JOptionPane.showMessageDialog(null, "Bobalhao!");
			return;
		}

		JFileChooser selectFile = new JFileChooser();
		FileNameExtensionFilter filter = new FileNameExtensionFilter("Arquivo tabulado", "csv");
		selectFile.setFileFilter(filter);

		try {
			if (selectFile.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
				ImportDataText importdataText = new ImportDataText();
				importdataText.setBufferPool(this.bufferPool);
				importdataText.setTableName(tableName);
				importdataText.loadFile(selectFile.getSelectedFile().getCanonicalPath());
			}
		} catch (Exception error) {
			JOptionPane.showMessageDialog(null, error.getMessage());
		}
	}

	/**
	 * @param args
	 *            the command line arguments
	 */
	public static void main(String args[]) {
		java.awt.EventQueue.invokeLater(new Runnable() {
			public void run() {
				new Codfish_v2().setVisible(true);
			}
		});
	}

	// Variables declaration - do not modify//GEN-BEGIN:variables
	private javax.swing.JButton		jButtonSelectFileData;
	private javax.swing.JButton		jButtonDelete;
	private javax.swing.JButton		jButtonInsert;
	private javax.swing.JButton		jButtonSelectSchema;
	private javax.swing.JButton		jButtonShow;
	private javax.swing.JButton		jButtonUpdate;
	private javax.swing.JComboBox	jComboBoxTableDB;
	private javax.swing.JComboBox	jComboBoxTableDBBrowse;
	private javax.swing.JLabel		jLabel1;
	private javax.swing.JLabel		jLabelFieldSearch;
	private javax.swing.JLabel		jLabelTableBrowse;
	private javax.swing.JLabel		jLabelTableDB;
	private javax.swing.JPanel		jPanelBrowse;
	private javax.swing.JPanel		jPanelDataBase;
	private javax.swing.JScrollPane	jScrollPaneJTable;
	private javax.swing.JScrollPane	jScrollPaneJTableFieldValue;
	private javax.swing.JTabbedPane	jTabbedPanePowerCod;
	private javax.swing.JTable		jTableFields;
	private javax.swing.JTable		jTableFieldsValue;
	private javax.swing.JTextField	jTextFieldFieldSearch;
	// End of variables declaration//GEN-END:variables

}
